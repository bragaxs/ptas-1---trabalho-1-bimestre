/**
 * üéì STUDENT.SERVICE.TS - Servi√ßo de L√≥gica de Neg√≥cio para Estudantes
 *
 * Este arquivo cont√©m as regras de neg√≥cio relacionadas a estudantes.
 * Valida√ß√µes, verifica√ß√µes de unicidade, etc.
 */

// ========================================
// IMPORTA√á√ïES
// ========================================

// Importa os tipos necess√°rios
import { User, createdAt, updatedAt } from '../models/userModel'

// Importa as fun√ß√µes de persist√™ncia
import * as persistenceService from './persistenceService'

// ========================================
// FUN√á√ïES DO SERVI√áO
// ========================================

/**
 * ‚ûï criarEstudante - Cria um novo estudante com valida√ß√µes
 *
 * @param dados - Dados do estudante a criar
 * @returns Promise com o estudante criado
 * @throws Error se valida√ß√£o falhar
 */
export async function criarUsuario(dados: createdAt): Promise<User> {
  // ========================================
  // 1. VALIDAR UNICIDADE DE EMAIL
  // ========================================

  // Busca todos os usu√°rios
  const usuariosExistentes: User[] = await persistenceService.buscarTodosUsuarios()

  // Verifica se j√° existe usu√°rio com este email
  const emailExiste = usuariosExistentes.some(
    (user) => user.email.toLowerCase() === dados.email.toLowerCase(),
  )

  // Se existir, lan√ßa erro
  if (emailExiste) {
    throw new Error(`Email ${dados.email} j√° est√° cadastrado`)
  }

  // ========================================
  // 2. VALIDAR UNICIDADE DE MATR√çCULA
  // ========================================

  // Verifica se j√° existe usu√°rio com estes dados
  const registroExiste = usuariosExistentes.some(
    (user) => user.registration === dados.registration,
  )

  // Se existir, lan√ßa erro
  if (registroExiste) {
    throw new Error(`Registro ${dados.registration} j√° est√° cadastrado`)
  }

  // ========================================
  // 3. GERAR NOVO ID
  // ========================================

    const novoUsuarioCriado = await persistenceService.criarUsuario(dados as User); ///dados as user: faz o typescript entender que √© do tipo user sem erros
    
// ========================================
// 4. CRIAR OBJETO USER COMPLETO
// ========================================

const novoUsuario: User = {
  id: novoUsuarioCriado.id, //pega o id que acabou de ser criado, e atribui ao novo usuario
  name: dados.name,
  email: dados.email,
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString(),
  role: 'Standard',
  registration: dados.registration,
  isActive: true,
}

  // ========================================
  // 5. SALVAR NO BANCO DE DADOS (arquivo JSON)
  // ========================================

  return await persistenceService.criarUsuario(novoUsuario)
}

/**
 * üë• buscarTodos - Busca todos os estudantes
 *
 * @returns Promise com array de estudantes
 */
export async function buscarTodos(): Promise<User[]> {
  // Simplesmente repassa para a camada de persist√™ncia
  return await persistenceService.buscarTodosUsuarios()
}

/**
 * üîç buscarPorId - Busca estudante por ID
 *
 * @param id - ID do estudante
 * @returns Promise com estudante ou undefined
 */
export async function buscarPorId(id: string): Promise<User | undefined> {
  return await persistenceService.buscarPorId(id)
}

/**
 * ‚úèÔ∏è atualizarEstudante - Atualiza dados de um estudante
 *
 * @param id - ID do estudante
 * @param dados - Dados a atualizar
 * @returns Promise com estudante atualizado ou undefined
 */
export async function atualizarUsuario(
  id: string,
  dados: updatedAt,
): Promise<User | undefined> {
  // ========================================
  // 1. VERIFICAR SE ESTUDANTE EXISTE
  // ========================================

  const estudanteExiste = await persistenceService.buscarPorId(id)

  if (!estudanteExiste) {
    return undefined
  }

  // ========================================
  // 2. VALIDAR EMAIL SE FORNECIDO
  // ========================================

  if (dados.email) {
    // Busca todos os usu√°rios
    const usuarios = await persistenceService.buscarTodosUsuarios()

    // Verifica se outro usu√°rio j√° usa este email
    const emailJaUsado = usuarios.some(
      (user) => user.id !== id && user.email.toLowerCase() === dados.email!.toLowerCase(),
    )

    if (emailJaUsado) {
      throw new Error(`Email ${dados.email} j√° est√° em uso por outro usu√°rio`)
    }
  }

  // ========================================
  // 3. VALIDAR MATR√çCULA SE FORNECIDA
  // ========================================

  if (dados.registration) {
    const usuarios = await persistenceService.buscarTodosUsuarios()

    const matriculaJaUsada = usuarios.some(
      (user) => user.id !== id && user.registration === dados.registration,
    )

    if (matriculaJaUsada) {
      throw new Error(`Matr√≠cula ${dados.registration} j√° est√° em uso`)
    }
  }

  // ========================================
  // 4. ATUALIZAR
  // ========================================

  return await persistenceService.atualizarUsuario(id, dados as User)  /// as serve para que o typescript entenda que √© do tipo user sem erros
}

/**
 * üóëÔ∏è deletarUsuario - Remove um usu√°rio
 *
 * @param id - ID do usu√°rio
 * @returns Promise com true se deletou, false caso contr√°rio
 */
export async function deletarUsuario(id: string): Promise<boolean> {
  return await persistenceService.deletarUsuario(id)
}

/**
 * ‚úÖ buscarAtivos - Busca apenas usu√°rios ativos
 *
 * @returns Promise com array de usu√°rios ativos
 */
export async function buscarAtivos(): Promise<User[]> {
  return await persistenceService.buscarAtivos()
}




/**
 * Obt√©m estat√≠sticas dos usuarios
 *
 * @returns Promise com objeto contendo estat√≠sticas
 */
export async function obterEstatisticas(): Promise<{
  total: number
  ativos: number
  inativos: number
}> {
  // Busca todos os usu√°rios
  const usuarios = await persistenceService.buscarTodosUsuarios()

  // Conta ativos
  const ativos = usuarios.filter((e) => e.isActive).length

  // Retorna estat√≠sticas
  return {
    total: usuarios.length, // Total de usu√°rios
    ativos: ativos, // Quantos est√£o ativos
    inativos: usuarios.length - ativos, // Quantos est√£o inativos
  }
}